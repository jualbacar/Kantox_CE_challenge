#!/bin/bash
set -e

echo "🔐 Generating Kubernetes secrets from Terraform outputs..."

# Get credentials from Terraform output
SCRIPT_DIR="$(dirname "$0")"
INFRA_DIR="$SCRIPT_DIR/../infrastructure"
K8S_DIR="$SCRIPT_DIR/../kubernetes"

cd "$INFRA_DIR"

# Check if using workspaces or regular state file
if [ -f terraform.tfstate ]; then
  STATE_FILE="terraform.tfstate"
elif [ -d terraform.tfstate.d ]; then
  # Using workspaces - try to detect current workspace
  WORKSPACE=$(terraform workspace show 2>/dev/null || echo "")
  if [ -n "$WORKSPACE" ] && [ -f "terraform.tfstate.d/$WORKSPACE/terraform.tfstate" ]; then
    STATE_FILE="terraform.tfstate.d/$WORKSPACE/terraform.tfstate"
  else
    echo "❌ Error: terraform.tfstate not found."
    echo "Current workspace: $WORKSPACE"
    echo "Run 'terraform apply' first or select the correct workspace."
    exit 1
  fi
else
  echo "❌ Error: terraform.tfstate not found. Run 'terraform apply' first."
  exit 1
fi

echo "Using state file: $STATE_FILE"

echo "📥 Fetching credentials from Terraform output..."
CREDS=$(terraform output -json minikube_base_credentials 2>/dev/null)

if [ -z "$CREDS" ] || [ "$CREDS" = "null" ]; then
  echo "❌ Error: minikube_base_credentials output not found."
  echo "Make sure you've run 'terraform apply' successfully."
  exit 1
fi

ACCESS_KEY=$(echo "$CREDS" | jq -r '.access_key_id')
SECRET_KEY=$(echo "$CREDS" | jq -r '.secret_access_key')

# Get role ARNs
ROLE_ARNS=$(terraform output -json service_role_arns 2>/dev/null)
API_ROLE_ARN=$(echo "$ROLE_ARNS" | jq -r '.api_role_arn')
AUX_ROLE_ARN=$(echo "$ROLE_ARNS" | jq -r '.aux_role_arn')

echo "✅ Credentials retrieved"
echo "   API Role: $API_ROLE_ARN"
echo "   AUX Role: $AUX_ROLE_ARN"

# Generate secret manifests
mkdir -p "$K8S_DIR"

echo ""
echo "� Generating secret manifest for API namespace..."
cat > "$K8S_DIR/api-aws-credentials-secret.yaml" <<EOF
# Generated by setup-k8s-secrets.sh
# DO NOT commit this file to git - contains sensitive credentials
apiVersion: v1
kind: Secret
metadata:
  name: aws-base-credentials
  namespace: api
type: Opaque
stringData:
  AWS_ACCESS_KEY_ID: "$ACCESS_KEY"
  AWS_SECRET_ACCESS_KEY: "$SECRET_KEY"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: aws-config
  namespace: api
data:
  AWS_ROLE_ARN: "$API_ROLE_ARN"
  AWS_DEFAULT_REGION: "eu-west-1"
EOF

echo "� Generating secret manifest for AUX namespace..."
cat > "$K8S_DIR/aux-aws-credentials-secret.yaml" <<EOF
# Generated by setup-k8s-secrets.sh
# DO NOT commit this file to git - contains sensitive credentials
apiVersion: v1
kind: Secret
metadata:
  name: aws-base-credentials
  namespace: aux
type: Opaque
stringData:
  AWS_ACCESS_KEY_ID: "$ACCESS_KEY"
  AWS_SECRET_ACCESS_KEY: "$SECRET_KEY"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: aws-config
  namespace: aux
data:
  AWS_ROLE_ARN: "$AUX_ROLE_ARN"
  AWS_DEFAULT_REGION: "eu-west-1"
EOF

echo ""
echo "✅ Secret manifests generated in kubernetes/ folder"
echo ""
echo "Generated files:"
echo "  - kubernetes/api-aws-credentials-secret.yaml"
echo "  - kubernetes/aux-aws-credentials-secret.yaml"
echo ""
echo "Next steps:"
echo "  1. Apply secrets: kubectl apply -f kubernetes/*-aws-credentials-secret.yaml"
echo "  2. Deploy your applications: kubectl apply -f kubernetes/"
echo ""
echo "⚠️  Remember: Do NOT commit *-aws-credentials-secret.yaml files to git"
echo ""
